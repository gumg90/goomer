{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2021-07-05T13:55:59.678Z",
    "end": "2021-07-05T13:56:23.857Z",
    "duration": 24179,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cdb45947-9a65-4170-b1f2-98209b261d59",
      "title": "",
      "fullFile": "cypress/integration/task_list.feature",
      "file": "cypress/integration/task_list.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
          "title": "Task list",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add a new Task (example #1)",
              "fullTitle": "Task list Add a new Task (example #1)",
              "timedOut": null,
              "duration": 17712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "972bf186-3793-45b8-8a5b-4f0d77a1b0c6",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add a new Task",
              "fullTitle": "Task list Add a new Task",
              "timedOut": null,
              "duration": 1222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e4f53953-17c4-4254-ae1e-ce4f431af4c6",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Complete and Clear Completed Task",
              "fullTitle": "Task list Complete and Clear Completed Task",
              "timedOut": null,
              "duration": 895,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c3e30c4c-e285-471e-8372-504256382985",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Leave completed task as Pending",
              "fullTitle": "Task list Leave completed task as Pending",
              "timedOut": null,
              "duration": 884,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "786766c5-3073-4459-970c-9a131ad7538b",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "refresh the page",
              "fullTitle": "Task list refresh the page",
              "timedOut": null,
              "duration": 717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "705eb4f9-1f77-4a30-b9ae-e90578cd5897",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "edit task",
              "fullTitle": "Task list edit task",
              "timedOut": null,
              "duration": 1056,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d39f162a-fc4f-4a67-8427-13a08a6f84c0",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete task",
              "fullTitle": "Task list Delete task",
              "timedOut": null,
              "duration": 871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "db019ca7-2f08-4218-bbc7-8a647d33ea0c",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "finish all tasks",
              "fullTitle": "Task list finish all tasks",
              "timedOut": null,
              "duration": 758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() =>\n    resolveAndRunBeforeHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() =>\n    indexedSteps.forEach(step =>\n      stepTest.call(this, state, step, rowData)\n    )\n  )\n  .then(() =>\n    resolveAndRunAfterHooks.call(this, scenario.tags, state.feature.name)\n  )\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "37c0140a-4a07-437b-a4c0-801e3433e8d4",
              "parentUUID": "c68b3d79-2cb3-447f-a7ba-dad7ef67ba74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "972bf186-3793-45b8-8a5b-4f0d77a1b0c6",
            "e4f53953-17c4-4254-ae1e-ce4f431af4c6",
            "c3e30c4c-e285-471e-8372-504256382985",
            "786766c5-3073-4459-970c-9a131ad7538b",
            "705eb4f9-1f77-4a30-b9ae-e90578cd5897",
            "d39f162a-fc4f-4a67-8427-13a08a6f84c0",
            "db019ca7-2f08-4218-bbc7-8a647d33ea0c",
            "37c0140a-4a07-437b-a4c0-801e3433e8d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24115,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}